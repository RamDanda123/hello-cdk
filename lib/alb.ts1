import * as cdk from 'aws-cdk-lib';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as elbv2 from 'aws-cdk-lib/aws-elasticloadbalancingv2';
import * as autoscaling from 'aws-cdk-lib/aws-autoscaling';

class MyStack extends cdk.Stack {
  constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // Create a VPC
    const vpc = new ec2.Vpc(this, 'MyVpc', {
      maxAzs: 2, // Use 2 availability zones for high availability
    });

    // Create an Auto Scaling Group
    const asg = new autoscaling.AutoScalingGroup(this, 'MyAsg', {
      vpc: vpc,
      instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.MICRO),
      machineImage: ec2.MachineImage.latestAmazonLinux(),
    });

    // Create an Application Load Balancer
    const alb = new elbv2.ApplicationLoadBalancer(this, 'MyAlb', {
      vpc: vpc,
      internetFacing: true, // Set to true if you want the ALB to be public
    });

    // Create a target group
    const targetGroup = new elbv2.ApplicationTargetGroup(this, 'MyTargetGroup', {
      vpc: vpc,
      port: 80,
      targetType: elbv2.TargetType.INSTANCE,
    });

    // Attach the target group to the Auto Scaling Group
    targetGroup.addTarget(asg);

    // Create a listener and associate it with the target group
    const listener = alb.addListener('MyListener', {
      port: 80,
      defaultTargetGroups: [targetGroup],
    });

    // Attach the Auto Scaling Group to the listener
    listener.addTargets('MyTarget', {
      port: 80,
      targets: [asg],
    });
  }
}

const app = new cdk.App();
new MyStack(app, 'MyStack');
